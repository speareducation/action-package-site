---
name: "Package Spear Site"
author: "Kenzi Stewart <kstewart@speareducation.com>"
description: "Packages a site into a deployable docker image"
inputs:
  aws-access-key-id:
    description: Amazon Access Key with permission to modify the ECR repository
    required: true
  aws-secret-access-key:
    description: Amazon Secret Access Key
    required: true
  aws-session-token:
    description: AWS Session token (if applicable)
    required: false
  aws-region:
    description: Region of AWS ECR repository
    required: false
    default: us-east-1
  ecr-registry:
    description: 12-digit ID of ECR registry
    required: true
  ecr-repo:
    description: Name of ECR repository to act upon
    required: true
  git-ref:
    description: Git Ref to build
    required: true
  node-auth-token:
    description: Auth token for node packages
    required: true
outputs:
  ecr-image:
    description: "Name of ECR image that was created during build"
    value: string
runs:
  using: "composite"
  steps:
    - name: Package site
      shell: bash
      run: |
        set -ex
        set -a
        . .buildconfig
        set +a
        # load ecr helper
        sudo apt update && sudo apt install -y amazon-ecr-credential-helper
        mkdir -p "${HOME}/.docker"
        echo "{ \"credsStore\": \"ecr-login\" }" >> ${HOME}/.docker/config.json
        BUILD_ARG_AWS_TOKEN=
        if [[ "x" != "x${{ inputs.aws-session-token }}" ]]; then
          export AWS_SESSION_TOKEN="${{ inputs.aws-session-token }}"
          BUILD_ARG_AWS_TOKEN="--build-arg AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}"
        fi
        export AWS_ACCESS_KEY_ID="${{ inputs.aws-access-key-id }}"
        export AWS_SECRET_ACCESS_KEY="${{ inputs.aws-secret-access-key }}"
        export AWS_REGION="${{ inputs.aws-region }}"

        TARGET_IMAGE_VERSION=$(echo "${{ inputs.git-ref }}" | sed -e 's%refs/tags/%%g' -e "s%^v%%g" -e "s%refs/heads/%%g" -e "s%features/%%g" -e "s%releases/%%g" -e "s%/%-%g")
        TARGET_IMAGE_VERSION=${TARGET_IMAGE_VERSION:-dev}
        docker build -f "${{ github.action_path }}/Dockerfile" \
          --build-arg AWS_ACCESS_KEY_ID="${{ inputs.aws-access-key-id }}" \
          --build-arg AWS_SECRET_ACCESS_KEY="${{ inputs.aws-secret-access-key }}" \
          ${BUILD_ARG_AWS_TOKEN} \
          --build-arg GIT_BRANCH="${TARGET_IMAGE_VERSION}" \
          --build-arg GIT_REPOSITORY="${GITHUB_REPOSITORY}" \
          --build-arg ARTIFACT="${{ inputs.ecr-repo }}" \
          --build-arg DOCKER_REGISTRY="${{ inputs.ecr-registry }}" \
          --build-arg DOCKER_BASE_IMAGE="${{ inputs.ecr-registry }}/${DOCKER_BASE_IMAGE_NAME}:${DOCKER_BASE_IMAGE_VER}" \
          --build-arg NODE_AUTH_TOKEN="${{ inputs.node-auth-token }}" \
          -t "${{ inputs.ecr-registry }}/${{ inputs.ecr-repo }}:${TARGET_IMAGE_VERSION}" .
    - name: Test Release Artifact
      shell: bash
      run: |
        set -ex
        sudo apt install -y python3-pip
        sudo pip3 install yq

        TARGET_IMAGE_VERSION=$(echo "${{ inputs.git-ref }}" | sed -e 's%refs/tags/%%g' -e "s%^v%%g" -e "s%refs/heads/%%g" -e "s%features/%%g" -e "s%releases/%%g" -e "s%/%-%g")
        TARGET_IMAGE_VERSION=${TARGET_IMAGE_VERSION:-dev}
        DOCKER_IMAGE_TAG="${{ inputs.ecr-registry }}/${{ inputs.ecr-repo }}:${TARGET_IMAGE_VERSION}"
        TEST_CONFIG_FILE=${{ github.action_path }}/test.config.yml
        BASE_DIR=$(pwd)
        BUILD_DIR=${BASE_DIR}/build
        mkdir -p ${BUILD_DIR}

        TEST_NAMES=$(yq -r '.tests | keys[]' < "${TEST_CONFIG_FILE}")
        DGOSS_BIN="${BUILD_DIR}/dgoss"
        mkdir -p ${BASE_DIR}/goss
        wget -q -O"${BASE_DIR}/goss/goss" https://github.com/aelsabbahy/goss/releases/download/v0.3.16/goss-linux-amd64 && chmod a+x "${BASE_DIR}/goss/goss"
        wget -q -O"${BUILD_DIR}/dgoss" "https://raw.githubusercontent.com/aelsabbahy/goss/v0.3.16/extras/dgoss/dgoss" && chmod a+x "${BUILD_DIR}/dgoss"
        for TEST_NAME in ${TEST_NAMES}; do
          DOCKER_ARGS=""
          echo "TEST: ${TEST_NAME}"
          echo -n "  "
          yq -r ".tests.${TEST_NAME}.description" < ${TEST_CONFIG_FILE}
          ENV_VARS=$(yq -r ".tests.${TEST_NAME}.environment | keys[]" < "${TEST_CONFIG_FILE}")
          for VAR_NAME in ${ENV_VARS}; do
            VAR_VALUE=$(yq -r ".tests.${TEST_NAME}.environment.${VAR_NAME}" < "${TEST_CONFIG_FILE}")
            DOCKER_ARGS+=" -e ${VAR_NAME}=${VAR_VALUE}"
          done
          TEST_OUTPUT_FILE="test-goss.${TEST_NAME}.yaml"
          yq -Y ".tests.${TEST_NAME}.goss_config" < "${TEST_CONFIG_FILE}" > "${TEST_OUTPUT_FILE}"

          GOSS_FILES_STRATEGY=cp GOSS_PATH="${BASE_DIR}/goss/goss" GOSS_FILE="${TEST_OUTPUT_FILE}" ${DGOSS_BIN} run --rm -it ${DOCKER_ARGS} "${DOCKER_IMAGE_TAG}"
        done
        echo "::set-output name=ecr-image::$(echo ${DOCKER_IMAGE_TAG})"
